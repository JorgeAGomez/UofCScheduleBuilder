//
//  DataHandler.swift
//  ScheduleBuilder
//
//  Created by Nik Ryzhenkov on 2016-02-02.
//  Copyright Â© 2016 Nik "The pretty one" Ryzhenkov. All rights reserved and shit.
//

import Foundation
import SwiftyJSON


public struct GlobalVariables2 {
    static var data: DataHandler!
}

public class DataHandler {
    
    public var courses = [Course_new]()
    var profs = [Prof]()
    var departments = [String]()
    
    
    init()
    {
        
        //        let timeAtPress = NSDate()
//        let j = readJSON("test_offering", fileType: "json")
        //readJSON("test_offering", fileType: "json")
        let url = "http://storage.googleapis.com/375abcf778234bc9aa1d43cd69058a10/042db825-e9db-46fb-9040-d20d4e56c4d8/courseOfferings.json"
        let file = download(url)
        processCourses(file)

        
        //        let coursesGeneralInfo = readJSON("courses", fileType: "json")
        
    }
    
    private func download(string: String) -> JSON {
        if let url = NSURL(string: string) {
            if let data = try? NSData(contentsOfURL: url, options: []) {
                return JSON(data: data)
            }
        }
        return nil
    }
    
    // Populates array of courses
    // @PARAMS:
    //   @dictionary: the entire JSON object associated with CourseOffering.JSON file
    // note: CourseOfferings.JSON is generated by a Python webscraper that is located outside the project
    private func processCourses( dictionary : JSON)
    {
        //Populate Courses directly with only available courses from the json file
        //this way we only display courses that are actually being offered
        //Keep all JSON relevant information here in this class
        //not inside Course/lab/tutorial etc. This should be the only place 
        //anything about JSON is known at all.
        
        
        var courseName:   String                        // Introduction to Computability
        var courseNumber: String                        // 313
        var courseCode:   String                        // CPSC
        var courseDescription: String   //TODO: WRITE A JOIN PYTHON SCRUPT TO JOIN TO JSON FILES
        var courseDepartment:  String    //TO GET ALL THAT INFO IN ONE PLACE
        var num: String
        var num_USEFUCKINGTHISONE: Int?
        var num_real : Int
        var section: String
        var lectures: [Lecture] = []
        var prereqs: String
        var returnList = [String]()
        var descriptionHandler = DescriptionHandler()

        // I am not sure why this format, but that's what all tutorials suggest
        // key seems to be pretty useless and is not used
        for (key, actualJSON):(String, JSON) in dictionary
        {

            let periodics = actualJSON["periodics"]

            courseName   = actualJSON["description"].stringValue
            courseNumber = actualJSON["courseNumber"].stringValue
            courseCode   = actualJSON["courseCode"].stringValue
            num = actualJSON["name"].stringValue
            if num.hasPrefix("0") {
                num_USEFUCKINGTHISONE = Int(String(num.characters.dropFirst()))
            }
            if num_USEFUCKINGTHISONE != nil {num_real = Int(num_USEFUCKINGTHISONE!)}
            section = actualJSON["group"].stringValue
            courseDepartment = getDepartment(courseCode)
            returnList = descriptionHandler.getDescription(courseCode + courseNumber)
            courseDescription = returnList[0]
            prereqs = returnList[1]
            
            
            if !departments.contains(courseDepartment)
            {
                departments.append(courseDepartment)
            }
            
            lectures     = getLectures(periodics)
            courses.append(Course_new(title: courseName, courseCode: courseCode, courseNumber: courseNumber, department: courseDepartment, prereqs: prereqs, description: courseDescription, lecture: lectures, name: num, section: section))
        }
    }
    
    private func getDepartment(code: String) -> String {
        var courseNames: [String] = ["ACCT-Accounting", "ACSC-Actuarial Science", "ACWR-Academic Writing", "AFST-African Studies", "ALMC-Arabic Lang & Muslim Cult", "AMAT-Applied Mathematics", "ANTH-Anthropology", "ARHI-Art History", "ARKY-Archaeology", "ARST-Architectural Studies", "ART-Art", "ARTS-ARTS", "ASHA-Arts & Science Honours Ac", "ASPH-Astrophysics", "ASTR-Astronomy", "ATTH-Athletic Therapy", "BCEM-Biochemistry", "BIOL-Biology", "BMEN-Biomedical Engineering", "BSEN-Business and Environment", "BTMA-Business Technology Manag", "CEST-Central & East European S", "CHEM-Chemistry", "CHIN-Chinese", "CMCL-Communication and Culture", "CMMB-Cellular, Molec, Micro B", "CNST-Canadian Studies", "COMS-Communication & Media Stu", "COOP-Co-operative Education", "CORE-Community Rehabilitation", "CPSC-Computer Science", "DEST-Development Studies", "DNCE-Dance", "DRAM-Drama", "EALS-East Asian Language Studi", "EASC-Earth Science", "EAST-East Asian Studies", "ECOL-Ecology", "ECON-Economics", "EDER-Educational Research", "EDPS-Educational Psychology", "EDUC-Education", "EESS-Energy & Environmental Sy", "ENCH-Chemical Engineering", "ENCI-Civil Engineering", "ENCM-Computer Engineering", "ENEE-Energy and the Environmen", "ENEL-Electrical Engineering", "ENEN-Environmental Engineering", "ENER-Energy Engineering", "ENGG-Engineering", "ENGL-English", "ENGO-Geomatics Engineering", "ENME-Mechanical Engineering", "ENMF-Manufacturing Engineering", "ENMG-Energy Management", "ENPE-Petroleum Engineering", "ENSC-Environmental Science", "ENSF-Software Engineering for", "ENTI-Entrepeneurship & Innova", "EVDA-Environ Design Architectu", "EVDB-Environmental Design Bloc", "EVDL-Environmental Design Land", "EVDP-Environmental Design Plan", "EVDS-Environmental Design", "FILM-Film", "FINA-Fine Arts", "FNCE-Finance", "FREN-French", "GEOG-Geography", "GERM-German", "GLGY-Geology", "GOPH-Geophysics", "GREK-Greek", "GRST-Greek and Roman Studies", "HROD-Human Resoures & Org Dyn", "HSOC-Health and Society", "HTST-History", "IFPE-Int'l Foundations Program", "IFPX-International Foundations", "INDG-Indigenous Studies", "INTE-Internship", "INTR-International Relations", "IPHE-IPHE", "ITAL-Italian", "JPNS-Japanese", "KNES-Kinesiology", "LANG-Language", "LAST-Latin American Studies", "LATI-Latin", "LAW-Law", "LING-Linguistics", "LWSO-Law and Society", "MATH-Mathematics", "MDCH-Community Health Sciences", "MDCN-Medicine", "MDPH-Medical Physics", "MDSC-Medical Science", "MGST-Management Studies", "MHST-Museum & Heritage Studies", "MKTG-Marketing", "MRSC-Marine Science", "MUED-Musical Education", "MUPF-Musical Performance", "MUSI-Music", "NANS-Nanoscience", "NEUR-Neuroscience", "NURS-Nursing", "OPMA-Operations Management", "PHED-Physical Education", "PHIL-Philosophy", "PHYS-Physics", "PLBI-Plant Biology", "PLMA-Petroleum Land Management", "PMAT-Pure Mathematics", "POLI-Political Science", "PPOL-PPOL", "PSYC-Psychology", "QBIO-Qatar Biology", "QCHE-Qatar Chemistry", "QMAT-Qatar Mathematics", "RELS-Religious Studies", "RMIN-Risk Management and Insur", "ROST-Romance Studies", "RUSS-Russian", "RVST-Research Visiting Student", "SAST-South Asian Studies", "SCIE-Science", "SEDV-Sustainable Energy Develo", "SENG-Software Engineering", "SGMA-Strategy and Global Manag", "SOCI-Sociology", "SOWK-Social Work", "SPAN-Spanish", "STAT-Statistics", "STST-Strategic Studies", "TAP-Term Abroad Program", "TOUR-Tourism and Hospitality M", "UBST-Urban Studies", "UNEX-University Exchange", "UNIV-University", "VETM-Veterinary Medicine", "WMST-Women's Studies", "ZOOL-Zoology"]
        for object in courseNames {
            var split = object.characters.split("-").map(String.init)
            if split[0] == code {
                return split[1]
            }
        }
        return code
    }
    
    

    
    
    // Because of how JSON is set up right now with periodics (that is flatly) we need to group all tutorials/labs for each
    // course based on section number.
    // @PARAMS:
    //   @periodics: json representation of periodics section associated with a given course
    //   @sectionNumber: what do you think?
    // @RETURNS: a list of tutorials and a list of labs. Both or either one can be empty or have elements in them. Do an emptyCheck if using this function
    private func getLabsOrTutsForLectureWithSection(periodics: JSON, sectionNumber: Int) -> (tutorials: [PEntity], labs: [PEntity])
    {
        var tutorials: [PEntity] = []
        var labs:      [PEntity] = []
        
        // I am not sure why this format, but that's what all tutorials suggest
        // key seems to be pretty useless and is not used
        for (key, actualJSON):(String, JSON) in periodics
        {
            
            if actualJSON["group"].intValue == sectionNumber
            {
                var type = actualJSON["type"].stringValue
                if type == "Tutorial" || type == "Lab"
                {
                    var times: [Time] = []
                    for (key, actualJSON2):(String, JSON) in actualJSON["times"]
                    {
                        times.append(Time(dict: actualJSON2))
                    }
                    if type == "Tutorial"
                    {
                        var num = actualJSON["name"].intValue
                        tutorials.append(Tutorial(number: num, time: times))
                    }
                    else
                    {
                        var num = actualJSON["name"].intValue
                        labs.append(Lab(number: num, time: times))
                    }
                }
            }
        }
        
        return (tutorials, labs)
    }

    // Because of how JSON is set up right now with periodics (that is flatly) we need to group all tutorials/labs for each
    // course based on section number.
    // @PARAMS:
    //   @periodics: json representation of periodics section associated with a given course
    //   @sectionNumber: what do you think?
    // @RETURNS: a list of lectures. maybe empty
    private func getLectures(periodics: JSON) -> [Lecture]
    {
        var lectures: [Lecture] = []
        
        // I am not sure why this format, but that's what all tutorials suggest
        // key seems to be pretty useless and is not used
        for(key, actualJSON):(String, JSON) in periodics
        {
            if actualJSON["type"].stringValue == "Lecture"
            {
                var times: [Time] = []
                for (key, actualJSON2):(String, JSON) in actualJSON["times"]
                {
                    times.append(Time(dict: actualJSON2))
                }
                let lectureSection = actualJSON["group"].intValue
                let (tutorials, labs) = getLabsOrTutsForLectureWithSection(periodics, sectionNumber: lectureSection)
                lectures.append(Lecture(number: lectureSection, time: times, tutorials: tutorials, labs: labs))
                
            }
        }
        
        return lectures
    
    }
    
    //TODO: ADD COMMENTS
    public func getFavourites()-> [Course_new]
    {
        var fav = [Course_new]()
        for c in self.courses where c.favourited == true{
            fav.append(c)
        }
        return fav
    }
    
    //TODO: ADD COMMENTS
    public func setFavourite(fav: Course_new){
        for c in self.courses{
            if(c.courseCode == fav.courseCode && c.courseNumber == fav.courseNumber)
            {
                c.favourited = true;
            }
        }
    }
    
    //TODO: ADD COMMENTS
    public func getAllCoursesFromDepartment(department: String) -> [Course_new]
    {
        var courses_out = [Course_new]()
        
        for c in self.courses where c.department == department
        {
            courses_out.append(c)
        }
        return courses_out 
    
    }
    
    //What do you think it does?
    private func readJSON (fileName: String, fileType: String) -> JSON{
        let path = NSBundle.mainBundle().pathForResource(fileName, ofType: fileType)
        let jsonData : NSData = try! NSData(contentsOfFile: path! as String, options: NSDataReadingOptions.DataReadingMapped)
        let jsond = JSON(data: jsonData)
        return jsond
    }

    
    
}